"""
1. Find errors in the given code fragment, correct them.
"""

from mpi4py import MPI

# Написанный код предназначен для выполнения двумя процессами:
# Первый процесс посылает сообщение "Hello world" через команду send(), 
# а второй процесс принимает данное сообщение через команду recv()

# создаем коммуникатор (группа процессов)
comm = MPI.COMM_WORLD

# Так как мы используем один из способов распараллеливания программы посредством библиотеки
# MPI (mpi4py - библиотека для python), то данный код выполняется несколькими процессам,
# что указывается при запуске программы, например:
# mpiexec -n 3 python task1.py
# Программа запустится на трех процессах.

# Каждый процесс запустит этот код. И на каждом процессе объект rank будет содержать свое значение
# - идентификатор процесса. Первый процесс будет иметь rank = 0, второй процесс - rank = 1 и т.д.
rank = comm.Get_rank()

# Соответственно, первый процесс будет создавать сообщение message и отсылать его второму процессу
# (это указано в функции send() через параметр dest - destination)
if rank == 0:
    # задается сообщение
    message = "Hello, world!" 
    
    # Старый вариант:
    # req = comm.isend(message, dest=0, tag=0)  # non-blocking communication, if here we have any code, it will be executed
    
    # Заменили асинхронную функцию отправления данных на синхронную (асинхронная тут не нужна).
    # Отправитель (rank = 0) посылает сообщение message с тегом 0 (идентификатор сообщения).
    comm.send(message, dest=1, tag=0)  

# Если программа выполняется более чем на одно процессе, тогда второй процесс с рангом, равным 1,
# будет принимать сообщение от первого процесса (с рангом 0).
if rank == 1:
    # Старый вариант:
    # req = comm.irecv(source=0, tag=1)
    # Заменили асинхронную функцию принятия данных на синхронную (асинхронная тут не нужна).
    # Второй процесс будет принимать данные через фукнцию recv (recieve), указав, что принимает данные
    # от источника с рангом, равным 0 (source=0), и с идентификатором = 0.
    message = comm.recv(source=0, tag=0)
    print(message)

# Все остальные процессы ничего не принимают, т.к. для них не предусмотрено это.